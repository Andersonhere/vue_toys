const formData = reactive({ maxScale: 200, minScale: 20, scaleStep: 10,
scaleButtons: true, scaleButtonsVertical: "top", scaleButtonsHorizontal:
"right", scaleButtonsSpaceX: 10, scaleButtonsSpaceY: 20, emitClickOnDrag: false,
});
<template>
  <div id="app">
    <el-row>
      <el-col :span="24">
        <h1>图形拖拽示例</h1>
      </el-col>
    </el-row>
    <el-row>
      <el-col :span="24">
        <div class="canvas" ref="canvas">
          <grabbing-box
            :scaleButtons="false"
            :start="start"
            :end="end"
            @dragging="onDragging"
            @dragend="onDragEnd"
          >
            <div
              v-for="(item, index) in items"
              :key="index"
              class="draggable"
              :style="{ left: item.x + 'px', top: item.y + 'px' }"
              @mousedown="startDrag(index, $event)"
            >
              <svg
                v-if="item.shape === 'triangle'"
                width="100"
                height="100"
                style="position: absolute"
              >
                <polygon points="50,0 100,100 0,100" style="fill: red" />
              </svg>
              <svg
                v-else-if="item.shape === 'square'"
                width="100"
                height="100"
                style="position: absolute"
              >
                <rect width="100" height="100" style="fill: blue" />
              </svg>
              <svg
                v-else-if="item.shape === 'circle'"
                width="100"
                height="100"
                style="position: absolute"
              >
                <circle cx="50" cy="50" r="50" style="fill: yellow" />
              </svg>
            </div>
          </grabbing-box>
        </div>
      </el-col>
    </el-row>
  </div>
</template>

<script>
import { GrabbingBox } from "vue-grabbing-box";

export default {
  components: {
    GrabbingBox,
  },
  data() {
    return {
      items: [
        { shape: "triangle", x: 50, y: 50 },
        { shape: "square", x: 200, y: 50 },
        { shape: "circle", x: 350, y: 50 },
        { shape: "square", x: 500, y: 50 },
      ],
      draggingIndex: null,
      startX: 0,
      startY: 0,
    };
  },
  methods: {
    startDrag(index, event) {
      this.draggingIndex = index;
      this.startX = event.clientX;
      this.startY = event.clientY;
      window.addEventListener("mousemove", this.onMouseMove);
      window.addEventListener("mouseup", this.endDrag);
    },
    onMouseMove(event) {
      if (this.draggingIndex !== null) {
        const dx = event.clientX - this.startX;
        const dy = event.clientY - this.startY;

        const newX = this.items[this.draggingIndex].x + dx;
        const newY = this.items[this.draggingIndex].y + dy;

        const canvas = this.$refs.canvas;
        const canvasRect = canvas.getBoundingClientRect();

        const minX = 0;
        const minY = 0;
        const maxX = canvasRect.width - 100; // 图形宽度
        const maxY = canvasRect.height - 100; // 图形高度

        const finalX = Math.min(Math.max(newX, minX), maxX);
        const finalY = Math.min(Math.max(newY, minY), maxY);

        if (!this.isOverlapping(finalX, finalY, this.draggingIndex)) {
          this.items[this.draggingIndex].x = finalX;
          this.items[this.draggingIndex].y = finalY;
        }

        this.startX = event.clientX;
        this.startY = event.clientY;
      }
    },
    endDrag() {
      this.draggingIndex = null;
      window.removeEventListener("mousemove", this.onMouseMove);
      window.removeEventListener("mouseup", this.endDrag);
    },
    isOverlapping(newX, newY, draggingIndex) {
      //const currentItem = this.items[draggingIndex];
      const currentWidth = 100; // 图形宽度
      const currentHeight = 100; // 图形高度

      for (let i = 0; i < this.items.length; i++) {
        if (i !== draggingIndex) {
          const otherItem = this.items[i];
          if (
            newX < otherItem.x + currentWidth &&
            newX + currentWidth > otherItem.x &&
            newY < otherItem.y + currentHeight &&
            newY + currentHeight > otherItem.y
          ) {
            return true; // 存在重叠
          }
        }
      }
      return false; // 无重叠
    },
    onDragging() {},
    onDragEnd() {},
  },
};
</script>

<style scoped>
.canvas {
  border: 1px solid #ccc;
  position: relative;
  width: 2000px; /* 设置画布宽度 */
  height: 1000px; /* 设置画布高度 */
  margin-top: 50px;
  background-color: transparent; /* 隐藏背景 */
}
.draggable {
  position: absolute;
  cursor: move;
}
</style>
